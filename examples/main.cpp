#include <Arduino.h> //dummy arduino.h for compiling arduino code on desktop systems
#include "sha1.h"
#include "hmacsha1.h"
#include <cstdio>
#include <cstring>

void verify_sha1_hash(const char * const text,  const uint8_t * hash)
{
#define DIGEST_LEN 20
	auto len=strlen(text);
	uint8_t digest[DIGEST_LEN]={0};
	sha1(digest, reinterpret_cast<const uint8_t *>(text), len);
	int pos=0;
	for(pos=0; pos<DIGEST_LEN; ++pos)
		if(digest[pos]!=hash[pos])
			break;
	if(pos<DIGEST_LEN)
		printf("Failed at pos %d\n",pos);
	else
		printf("Ok\n");
}

void verify_hmacsha1(const char * const text,  const uint8_t * sample_hmac, uint8_t * key, size_t keySz)
{
#define HMAC_LEN 20
	auto len=strlen(text);
	uint8_t opBuff[hmacsha1_get_opbuff_sz(len)];
	memcpy(opBuff,text,len);
	hmacsha1(key,keySz,opBuff,len);
	int pos=0;
	for(pos=0; pos<HMAC_LEN; ++pos)
		if(opBuff[pos]!=sample_hmac[pos])
			break;
	if(pos<HMAC_LEN)
		printf("Failed at pos %d\n",pos);
	else
		printf("Ok\n");
}

int main()
{
	printf("*** SHA1 ***\n");
	char text1[]="abc";
	uint8_t hash1[] = { 0xa9,0x99,0x3e,0x36,0x47,0x06,0x81,0x6a,0xba,0x3e,0x25,0x71,0x78,0x50,0xc2,0x6c,0x9c,0xd0,0xd8,0x9d };
	printf("Verifying text1... ");
	verify_sha1_hash(text1,hash1);

	char text2[]="";
	uint8_t hash2[] = { 0xda,0x39,0xa3,0xee,0x5e,0x6b,0x4b,0x0d,0x32,0x55,0xbf,0xef,0x95,0x60,0x18,0x90,0xaf,0xd8,0x07,0x09 };
	printf("Verifying text2... ");
	verify_sha1_hash(text2,hash2);

	char text3[]="abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
	uint8_t hash3[] = { 0x84,0x98,0x3e,0x44,0x1c,0x3b,0xd2,0x6e,0xba,0xae,0x4a,0xa1,0xf9,0x51,0x29,0xe5,0xe5,0x46,0x70,0xf1 };
	printf("Verifying text3... ");
	verify_sha1_hash(text3,hash3);

	char text4[]="abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
	uint8_t hash4[] = { 0xa4,0x9b,0x24,0x46,0xa0,0x2c,0x64,0x5b,0xf4,0x19,0xf9,0x95,0xb6,0x70,0x91,0x25,0x3a,0x04,0xa2,0x59 };
	printf("Verifying text4... ");
	verify_sha1_hash(text4,hash4);

	//test vectors from there: https://tools.ietf.org/html/rfc2202
	printf("\n*** HMACSHA1 ***\n");
	char msg1[]="Hi There";
	uint8_t key1[] = { 0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b };
	uint8_t hmac1[] = { 0xb6,0x17,0x31,0x86,0x55,0x05,0x72,0x64,0xe2,0x8b,0xc0,0xb6,0xfb,0x37,0x8c,0x8e,0xf1,0x46,0xbe,0x00 };
	printf("Verifying msg1... ");
	verify_hmacsha1(msg1, hmac1, key1, 20);

	char msg2[]="what do ya want for nothing?";
	uint8_t key2[] = "Jefe";
	uint8_t hmac2[] = { 0xef,0xfc,0xdf,0x6a,0xe5,0xeb,0x2f,0xa2,0xd2,0x74,0x16,0xd5,0xf1,0x84,0xdf,0x9c,0x25,0x9a,0x7c,0x79 };
	printf("Verifying msg2... ");
	verify_hmacsha1(msg2, hmac2, key2, 4);

	uint8_t msg3[]= { 0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,
	                  0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,
	                  0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0x00};
	uint8_t key3[] = { 0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa };
	uint8_t hmac3[] = { 0x12,0x5d,0x73,0x42,0xb9,0xac,0x11,0xcd,0x91,0xa3,0x9a,0xf4,0x8a,0xa1,0x7b,0x4f,0x63,0xf1,0x75,0xd3 };
	printf("Verifying msg3... ");
	verify_hmacsha1(reinterpret_cast<char*>(msg3), hmac3, key3, 20);


	uint8_t msg4[]= { 0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,
	                  0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,
	                  0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0xcd,0x00};
	uint8_t key4[] = { 0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19 };
	uint8_t hmac4[] = { 0x4c,0x90,0x07,0xf4,0x02,0x62,0x50,0xc6,0xbc,0x84,0x14,0xf9,0xbf,0x50,0xc8,0x6c,0x2d,0x72,0x35,0xda };
	printf("Verifying msg4... ");
	verify_hmacsha1(reinterpret_cast<char*>(msg4), hmac4, key4, 25);

	char msg5[]= "Test With Truncation";
	uint8_t key5[] = { 0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c };
	uint8_t hmac5[] = { 0x4c,0x1a,0x03,0x42,0x4b,0x55,0xe0,0x7f,0xe7,0xf2,0x7b,0xe1,0xd5,0x8b,0xb9,0x32,0x4a,0x9a,0x5a,0x04 };
	printf("Verifying msg5... ");
	verify_hmacsha1(msg5, hmac5, key5, 20);

	char msg6[]= "Test Using Larger Than Block-Size Key - Hash Key First";
	uint8_t key6[] = { 0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
	                   0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
	                   0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
	                   0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa };
	uint8_t hmac6[] = { 0xaa,0x4a,0xe5,0xe1,0x52,0x72,0xd0,0x0e,0x95,0x70,0x56,0x37,0xce,0x8a,0x3b,0x55,0xed,0x40,0x21,0x12 };
	printf("Verifying msg6... ");
	verify_hmacsha1(msg6, hmac6, key6, 80);

	char msg7[]= "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data";
	uint8_t key7[] = { 0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
	                   0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
	                   0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
	                   0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa };
	uint8_t hmac7[] = { 0xe8,0xe9,0x9d,0x0f,0x45,0x23,0x7d,0x78,0x6d,0x6b,0xba,0xa7,0x96,0x5c,0x78,0x08,0xbb,0xff,0x1a,0x91 };
	printf("Verifying msg7... ");
	verify_hmacsha1(msg7, hmac7, key7, 80);

	return 0;
}
